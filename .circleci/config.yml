version: 2.1


commands:
  notify_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  notify_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1
  destroy-environment:
    description: Destroy  infrastructure on fail
    steps:
      - run:
          name: Delete S3 bucket files
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --force
            # aws s3api list-buckets --output text --query "Buckets[*].[Name]" > todelete.txt
            #i=$(wc --line < todelete.txt)
            #z=0
            #while [ $i -gt $z ]
            #do
            #    bucket=$(head -1 todelete.txt)
            #    if [ "$bucket" != "udapeople-ddsgkddsgkddsgk" ]
            #    then
            #        aws s3 rm s3://${bucket}/ --recursive
            #        aws s3 rb s3://${bucket}/ --force
            #        sed -i '1d' todelete.txt
            #       i=$(wc --line < todelete.txt)
            #    else
            #        sed -i '1d' todelete.txt
            #        i=$(wc --line < todelete.txt)
            #    fi
            #done
            #if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            #then
            #   aws s3 rm s3://udapeople-*/ --recursive
            #   aws s3 rb s3://udapeople-*/ --force
            #fi
      - run:
          name: Destroy Backend Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy Frontend Environment
          when: on_fail
          command: |
            #aws cloudformation list-stacks --output text --query "StackSummaries[*].[StackName]"  > todeletestack.txt
            #cat todeletestack.txt
            #j=$(wc --line < todeletestack.txt)
            #IS="InitialStack"
            #x=0
            #while [ $j -gt $x ] 
            #do
            #stack=$(head -1 todeletestack.txt)
                #if [ "$stack" != "$IS" ]
                #then
                    #aws cloudformation delete-stack --stack-name "${stack}"
                    #sed -i '1d' todeletestack.txt
                    #j=$(wc --line < todeletestack.txt)
                #else
                    #sed -i '1d' todeletestack.txt
                    #j=$(wc --line < todeletestack.txt)
                  #fi
            #done
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  revert-migration:
    description: Revert Last Migration
    steps:
      - run:
          name: Reverting Last Migration
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/2mcLRs5u4GEpSogUWhb9Je/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS=1 ));
            then
               cd ~/project/backend
               npm install
               npm run migrations:revert
            fi
orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Front-End
          command: |
            cd frontend
            npm install
            npm run build
      - notify_error
      - notify_pass
  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Back-End
          command: |
            cd backend
            npm install
            npm run build
      - notify_error
      - notify_pass
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Front-End
          command: |
            cd frontend
            npm install
            npm run test
      - notify_error
      - notify_pass
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Back-End
          command: |
            cd backend
            npm install
            npm run test
      - notify_error
      - notify_pass
  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan Front-End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical  --force
            npm audit --audit-level=critical
      - notify_error
      - notify_pass
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan Back-End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_error
      - notify_pass
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure FrontEnd Infrastructure Exists
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides  ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].[PublicDnsName]' --output text >> .circleci/ansible/inventory.txt
            sed '/None/d' .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Ensure Backend Infrastructure Exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: dulgan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["0c:9b:a0:5e:35:f3:57:69:1f:12:bf:3a:21:5a:19:5d"]
      - attach_workspace:
          at: ~/
      - run:
          command: |
            sudo apt-get update
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install awscli
      - run:
          name: Install Python
          command: |
            sudo apt-get install python3
      - run:
          command: |
            sudo apt-get install ansible
      - run:
          command: |
            sudo apt-get -y install tar gzip
      - run:
          name: Install NodeJs
          command: |
            sudo apt-get install npm
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run Migrations
          command: |
            cd backend
            npm install
            npm install migrations
            npm run  migrations > migrations_dump.txt
      - run:
          name: Send Migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/2mcLRs5u4GEpSogUWhb9Je/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - revert-migration
      - destroy-environment
  deploy-frontend:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: dulgan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          command: |
            sudo apt-get update
      - run:
          name: Install AWS CLI
          command:
            sudo apt-get install awscli
      - run:
          name: Install Python
          command: |
            sudo apt-get install python3
      - run:
          command: |
            sudo apt-get install ansible
      - run:
          command: |
            sudo apt-get -y install tar gzip
      - run:
          name: Install NodeJs
          command: |
            sudo apt-get install npm
      - attach_workspace:
          at: ~/
      - run:
          name: Get Backend Url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instance --filters "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].[PublicDnsName]' --output text)
            export API_URL="http://${BACKEND_URL}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          no-output-timeout: 6m
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migration
  deploy-backend:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: dulgan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0c:9b:a0:5e:35:f3:57:69:1f:12:bf:3a:21:5a:19:5d"]
      - run:
          command: |
            sudo apt-get update
      - run:
          name: Install AWS CLI
          command:
            sudo apt-get install awscli
      - run:
          name: Install Python
          command: |
            sudo apt-get install python3
      - run:
          command: |
            sudo apt-get install ansible
      - run:
          command: |
            sudo apt-get -y install tar gzip
      - run:
          name: Install NodeJs
          command: |
            sudo apt-get install npm
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy Backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            export SCP_HOST=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].[PublicDnsName]' --output text)
            ssh-keyscan -H $SCP_HOST >> ~/.ssh/known_hosts
            scp artifact.tar.gz ubuntu@$SCP_HOST:/home/ubuntu
            cd .circleci/ansible
            echo "Content of the inventory.txt file is ---"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migration
  smoke-test:
    docker: 
      - image: cimg/base:2021.04
        auth:
          username: dulgan
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          command: sudo apt-get update
      - run:
          name: Install Dependency Curl
          command: |
            sudo apt-get install curl
      - run:
          name: Install Dependency NodeJs
          command: |
            sudo apt-get install nodejs
      - run:
          name: Install Dependency NPM
          command: |
            sudo apt-get install npm
      - run:
          name: Install Dependency AWS CLI
          command: |
            sudo apt-get install awscli
      - run:
          name: Backend Smoke-Test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].[PublicDnsName]' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend Smoke-Test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo "${URL}"
            if curl -s "${URL}" | grep "Welcome"
            then
                exit 0
            else
                exit 1
            fi
      - destroy-environment
      - revert-migration
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update CloudFront Stack
          command:
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople
  cleanup-oldinfra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Delete old stack
          command: |
            export OldWorkFlowID=$(aws cloudformation list-exports --query "Exports[?Name=='0c00d16'].Value" --output text)
            echo OldWorkFlowID=${OldWorkFlowID}
            echo CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text))
            echo STACKS=${STACKS[@]}
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkFlowID}" ]]
            then
                echo "----------------------Delete Confirmed--------------------"
                if aws s3api head-bucket --bucket udapeople-"${OldWorkflowID}"
                then
                    aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                fi
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
                echo "-----------------------Cannot Delete-----------------------"
            fi
      - destroy-environment
      - revert-migration
workflows:
  default:
    jobs:
      - build-frontend:
          context: CircleBot
      - build-backend:
          context: CircleBot
      - test-frontend:
          context: CircleBot
          requires: [build-frontend]
      - test-backend:
          context: CircleBot
          requires: [build-backend]
      - scan-frontend:
          context: CircleBot
          requires: [build-frontend]
      - scan-backend:
          context: CircleBot
          requires: [build-backend]
      - deploy-infrastructure:
          context: CircleBot
          requires: 
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          context: CircleBot
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          context: CircleBot
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          context: CircleBot
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          context: CircleBot
          requires: [deploy-frontend]
          filters:
            branches:
              only: [master]
      - smoke-test:
          context: CircleBot
          requires: [deploy-backend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          context: CircleBot
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup-oldinfra:
          context: CircleBot
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]
