version: 2.1
commands:
  notify_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  notify_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1
  destroy-environment:
    description: Destroy  infrastructure on fail
    steps:
      - run:
          name: Destroy Backen Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy Frontend Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
  revert-migration:
    description: Revert Last Migration
    steps:
      - run:
          name: Reverting Last Migration
          when: on_fail
          command: |
            SUCCESS=1
            if (( $SUCCESS=1 ));
            then
               cd ~/project/backend
               npm install
               npm run migrations:revert
            fi
orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Front-End
          command: |
            cd frontend
            npm install
            npm run build
      - notify_error
      - notify_pass
  build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Back-End
          command: |
            cd backend
            npm install
            npm run build
      - notify_error
      - notify_pass
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Front-End
          command: |
            cd frontend
            npm install
            npm run test
      - notify_error
      - notify_pass
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Back-End
          command: |
            cd backend
            npm install
            npm run test
      - notify_error
      - notify_pass
  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan Front-End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical  --force
            npm audit --audit-level=critical
      - notify_error
      - notify_pass
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan Back-End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_error
      - notify_pass
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure Backend Infrastructure Exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides  ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Ensure Backend Infrastructure Exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["0c:9b:a0:5e:35:f3:57:69:1f:12:bf:3a:21:5a:19:5d"]
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/
      - run: 
          name: Install Dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run Migrations
          command: |
            cd backend
            npm install
            npm i  migrations > migrations_dump.txt
      - run:
          name: Send Migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/2mcLRs5u4GEpSogUWhb9Je/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            apt -y install python3
      - run:
          command: |
            apk add --update ansible
      - run:
          command: |
            yum -y install tar gzip 
      - attach_workspace:
          at: ~/
      - run:
          name: Get Backend Url
          command: |
            export BACKEND_IP=$(aws ec2 decribe-instances...............)
            export API_URL="http://${BACKEND_URL}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          command: |
            npm run build
      - run:
          name: Deploy frontend objects
          command: |


              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migration
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0c:9b:a0:5e:35:f3:57:69:1f:12:bf:3a:21:5a:19:5d"]
      - run:
          command: |
            yum -y install tar gzip
      - run:
          command: |
            apt -y install python3
      - run:
          command: |
            apk add  --update ansible
      - run:
          command: |
            npm install
      - run:
          command: | 
            apt -y install nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy Backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz
            cd .circleci/ansible
            echo "Content of the inventory.txt file is ---"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migration
workflows:
  default:
    jobs:
      - build-frontend:
          context: CircleBot
      - build-backend:
          context: CircleBot
      - test-frontend:
          context: CircleBot
          requires: [build-frontend]
      - test-backend:
          context: CircleBot
          requires: [build-backend]
      - scan-frontend:
          context: CircleBot
          requires: [build-frontend]
      - scan-backend:
          context: CircleBot
          requires: [build-backend]
      - deploy-infrastructure:
          context: CircleBot
          requires: 
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          context: CircleBot
          requires: [deploy-infrastructure]
      - run-migrations:
          context: CircleBot
          requires: [configure-infrastructure]
      - deploy-frontend:
          context: CircleBot
          requires: [run-migrations]
      - deploy-backend:
          context: CircleBot
          requires: [deploy-frontend]
